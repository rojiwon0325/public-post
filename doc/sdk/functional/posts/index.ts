/**
 * @packageDocumentation
 * @module api.functional.posts
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher } from "nestia-fetcher";
import type { IConnection } from "nestia-fetcher";
import TSON from "typescript-json";

import type { PublicPost } from "./../../../../src/api/pp/domain/index";
import type { IPPUsecase } from "./../../../../src/api/pp/application/port/pp.usecase.port";

/**
 * 게시글 목록 조회
 * 
 * @tag PP
 * @param connection connection Information of the remote HTTP(s) server with headers (+encryption password)
 * @param page 페이지 정보를 전달한다. 기본값은 1
 * @returns 게시글이 최신순으로 조회된다.
 * 
 * @controller PPController.findMany()
 * @path GET /posts
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function findMany
    (
        connection: IConnection,
        page: string | undefined
    ): Promise<findMany.Output>
{
    return Fetcher.fetch
    (
        connection,
        findMany.ENCRYPTED,
        findMany.METHOD,
        findMany.path(page)
    );
}
export namespace findMany
{
    export type Output = Array<PublicPost.Public>;

    export const METHOD = "GET" as const;
    export const PATH: string = "/posts";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(page: string | undefined): string
    {
        return `/posts?${new URLSearchParams(
        {
            page
        } as any).toString()}`;
    }
}

/**
 * 게시글 생성
 * 
 * @tag PP
 * @param connection connection Information of the remote HTTP(s) server with headers (+encryption password)
 * @param body 생성할 게시글 정보
 * @throw 400 부적합한 데이터를 전달한 경우
 * @returns 생성된 게시글 정보
 * 
 * @controller PPController.create()
 * @path POST /posts
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function create
    (
        connection: IConnection,
        body: IPPUsecase.Create
    ): Promise<create.Output>
{
    return Fetcher.fetch
    (
        connection,
        create.ENCRYPTED,
        create.METHOD,
        create.path(),
        body,
        create.stringify
    );
}
export namespace create
{
    export type Input = IPPUsecase.Create;
    export type Output = PublicPost.Public;

    export const METHOD = "POST" as const;
    export const PATH: string = "/posts";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(): string
    {
        return `/posts`;
    }
    export const stringify = (input: Input) => TSON.stringify(input);
}

/**
 * 게시물글 수정
 * 
 * @tag PP
 * @param connection connection Information of the remote HTTP(s) server with headers (+encryption password)
 * @param id 변경할 게시글 id
 * @param body 비밀번호와 변경할 데이터
 * @throw 400 부적합한 데이터를 전달한 경우
 * @throw 403 비밀번호가 일치하지 않는 경우
 * @throw 404 게시글이 존재하지 않는 경우
 * 
 * @controller PPController.update()
 * @path PATCH /posts/:pp_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function update
    (
        connection: IConnection,
        id: number,
        body: IPPUsecase.UpdateBody
    ): Promise<void>
{
    return Fetcher.fetch
    (
        connection,
        update.ENCRYPTED,
        update.METHOD,
        update.path(id),
        body,
        update.stringify
    );
}
export namespace update
{
    export type Input = IPPUsecase.UpdateBody;

    export const METHOD = "PATCH" as const;
    export const PATH: string = "/posts/:pp_id";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(id: number): string
    {
        return `/posts/${encodeURIComponent(id)}`;
    }
    export const stringify = (input: Input) => TSON.stringify(input);
}

/**
 * 게시글 삭제
 * 
 * @tag PP
 * @param connection connection Information of the remote HTTP(s) server with headers (+encryption password)
 * @param id 변경할 게시글
 * @param body 게시글 비밀번호
 * @throw 403 비밀번호가 일치하지 않는 경우
 * @throw 404 게시글이 존재하지 않는 경우
 * 
 * @controller PPController.remove()
 * @path DELETE /posts/:pp_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function remove
    (
        connection: IConnection,
        id: number,
        body: IPPUsecase.RemoveBody
    ): Promise<void>
{
    return Fetcher.fetch
    (
        connection,
        remove.ENCRYPTED,
        remove.METHOD,
        remove.path(id),
        body,
        remove.stringify
    );
}
export namespace remove
{
    export type Input = IPPUsecase.RemoveBody;

    export const METHOD = "DELETE" as const;
    export const PATH: string = "/posts/:pp_id";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(id: number): string
    {
        return `/posts/${encodeURIComponent(id)}`;
    }
}